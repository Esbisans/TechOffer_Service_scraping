# version: 0.2
# phases:
#   install:
#     runtime-versions:
#       nodejs: 12
#     commands:
#       - echo Installing Mocha...
#       - npm install -g mocha
#   pre_build:
#     commands:
#       - echo Installing source NPM dependencies...
#       - npm install
#       - npm install unit.js
#   build:
#     commands:
#       - echo Build started on `date`
#       - echo Compiling the Node.js code
#       - npm run dev
#   post_build:
#     commands:
#       - echo Build completed on `date`
# # Include only the files required for your application to run.
# artifacts:
#   files:
#     - app.js
#     - package.json
#     - node_modules/**/*


version: 0.2


phases:
  pre_build:
    commands:
      - apt-get update
      - apt-get install -yq gconf-service libasound2 libatk1.0-0 libc6 libcairo2
        libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4
        libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0
        libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1
        libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1
        libxss1 libxtst6 ca-certificates fonts-liberation libnss3 lsb-release
        xdg-utils wget
      - echo Installing source NPM dependencies...
      - npm install
      - npm install unit.js
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region REGION | docker login --username AWS --password-stdin DOCKER_ID.dkr.ecr.REGION.amazonaws.com
      - REPOSITORY_URI=901845911494.dkr.ecr.us-east-1.amazonaws.com/techoffer-scraping
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:1.0 .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file...
      - printf '[{"name":"api-centros-de-lavado","imageUri":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
      - cat imagedefinitions.json
artifacts:
  files:
    - imagedefinitions.json
    - target/rmnd.jar
